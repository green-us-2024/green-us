// Generated by view binder compiler. Do not edit!
package kr.ac.kpu.green_us.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.Guideline;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import kr.ac.kpu.green_us.R;

public final class FragmentMyGreenIngBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final ImageView btnMore;

  @NonNull
  public final TextView greeningDegree;

  @NonNull
  public final Guideline guideline5;

  @NonNull
  public final Guideline guideline6;

  @NonNull
  public final TextView ingGreeningNum;

  @NonNull
  public final TextView ingTotalGreeningNum;

  @NonNull
  public final RecyclerView recyclerviewGreenDegree;

  @NonNull
  public final RecyclerView recyclerviewIngGreening;

  @NonNull
  public final CircularProgressIndicator totalDegree;

  @NonNull
  public final TextView totalDegreePercentage;

  private FragmentMyGreenIngBinding(@NonNull NestedScrollView rootView, @NonNull ImageView btnMore,
      @NonNull TextView greeningDegree, @NonNull Guideline guideline5,
      @NonNull Guideline guideline6, @NonNull TextView ingGreeningNum,
      @NonNull TextView ingTotalGreeningNum, @NonNull RecyclerView recyclerviewGreenDegree,
      @NonNull RecyclerView recyclerviewIngGreening, @NonNull CircularProgressIndicator totalDegree,
      @NonNull TextView totalDegreePercentage) {
    this.rootView = rootView;
    this.btnMore = btnMore;
    this.greeningDegree = greeningDegree;
    this.guideline5 = guideline5;
    this.guideline6 = guideline6;
    this.ingGreeningNum = ingGreeningNum;
    this.ingTotalGreeningNum = ingTotalGreeningNum;
    this.recyclerviewGreenDegree = recyclerviewGreenDegree;
    this.recyclerviewIngGreening = recyclerviewIngGreening;
    this.totalDegree = totalDegree;
    this.totalDegreePercentage = totalDegreePercentage;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentMyGreenIngBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentMyGreenIngBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_my_green_ing, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentMyGreenIngBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_more;
      ImageView btnMore = ViewBindings.findChildViewById(rootView, id);
      if (btnMore == null) {
        break missingId;
      }

      id = R.id.greening_degree;
      TextView greeningDegree = ViewBindings.findChildViewById(rootView, id);
      if (greeningDegree == null) {
        break missingId;
      }

      id = R.id.guideline5;
      Guideline guideline5 = ViewBindings.findChildViewById(rootView, id);
      if (guideline5 == null) {
        break missingId;
      }

      id = R.id.guideline6;
      Guideline guideline6 = ViewBindings.findChildViewById(rootView, id);
      if (guideline6 == null) {
        break missingId;
      }

      id = R.id.ing_greening_num;
      TextView ingGreeningNum = ViewBindings.findChildViewById(rootView, id);
      if (ingGreeningNum == null) {
        break missingId;
      }

      id = R.id.ing_total_greening_num;
      TextView ingTotalGreeningNum = ViewBindings.findChildViewById(rootView, id);
      if (ingTotalGreeningNum == null) {
        break missingId;
      }

      id = R.id.recyclerview_green_degree;
      RecyclerView recyclerviewGreenDegree = ViewBindings.findChildViewById(rootView, id);
      if (recyclerviewGreenDegree == null) {
        break missingId;
      }

      id = R.id.recyclerview_ing_greening;
      RecyclerView recyclerviewIngGreening = ViewBindings.findChildViewById(rootView, id);
      if (recyclerviewIngGreening == null) {
        break missingId;
      }

      id = R.id.total_degree;
      CircularProgressIndicator totalDegree = ViewBindings.findChildViewById(rootView, id);
      if (totalDegree == null) {
        break missingId;
      }

      id = R.id.total_degree_percentage;
      TextView totalDegreePercentage = ViewBindings.findChildViewById(rootView, id);
      if (totalDegreePercentage == null) {
        break missingId;
      }

      return new FragmentMyGreenIngBinding((NestedScrollView) rootView, btnMore, greeningDegree,
          guideline5, guideline6, ingGreeningNum, ingTotalGreeningNum, recyclerviewGreenDegree,
          recyclerviewIngGreening, totalDegree, totalDegreePercentage);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
