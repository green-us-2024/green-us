// Generated by view binder compiler. Do not edit!
package kr.ac.kpu.green_us.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import kr.ac.kpu.green_us.R;

public final class FragmentMyGreenEndBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final ImageView btnMore;

  @NonNull
  public final TextView endGreen;

  @NonNull
  public final ConstraintLayout endGreenCnt;

  @NonNull
  public final TextView endGreenNum;

  @NonNull
  public final TextView endGreeningStatistics;

  @NonNull
  public final LinearLayout existEnd;

  @NonNull
  public final ImageView logo;

  @NonNull
  public final ConstraintLayout moreBtn;

  @NonNull
  public final LinearLayout notExistEnd;

  @NonNull
  public final ImageView pointImg;

  @NonNull
  public final RecyclerView recyclerviewEndGreening;

  @NonNull
  public final TextView tiotalGainPoint;

  @NonNull
  public final ConstraintLayout totalPoint;

  @NonNull
  public final TextView totalPointNum;

  private FragmentMyGreenEndBinding(@NonNull NestedScrollView rootView, @NonNull ImageView btnMore,
      @NonNull TextView endGreen, @NonNull ConstraintLayout endGreenCnt,
      @NonNull TextView endGreenNum, @NonNull TextView endGreeningStatistics,
      @NonNull LinearLayout existEnd, @NonNull ImageView logo, @NonNull ConstraintLayout moreBtn,
      @NonNull LinearLayout notExistEnd, @NonNull ImageView pointImg,
      @NonNull RecyclerView recyclerviewEndGreening, @NonNull TextView tiotalGainPoint,
      @NonNull ConstraintLayout totalPoint, @NonNull TextView totalPointNum) {
    this.rootView = rootView;
    this.btnMore = btnMore;
    this.endGreen = endGreen;
    this.endGreenCnt = endGreenCnt;
    this.endGreenNum = endGreenNum;
    this.endGreeningStatistics = endGreeningStatistics;
    this.existEnd = existEnd;
    this.logo = logo;
    this.moreBtn = moreBtn;
    this.notExistEnd = notExistEnd;
    this.pointImg = pointImg;
    this.recyclerviewEndGreening = recyclerviewEndGreening;
    this.tiotalGainPoint = tiotalGainPoint;
    this.totalPoint = totalPoint;
    this.totalPointNum = totalPointNum;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentMyGreenEndBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentMyGreenEndBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_my_green_end, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentMyGreenEndBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_more;
      ImageView btnMore = ViewBindings.findChildViewById(rootView, id);
      if (btnMore == null) {
        break missingId;
      }

      id = R.id.end_green;
      TextView endGreen = ViewBindings.findChildViewById(rootView, id);
      if (endGreen == null) {
        break missingId;
      }

      id = R.id.end_green_cnt;
      ConstraintLayout endGreenCnt = ViewBindings.findChildViewById(rootView, id);
      if (endGreenCnt == null) {
        break missingId;
      }

      id = R.id.end_green_num;
      TextView endGreenNum = ViewBindings.findChildViewById(rootView, id);
      if (endGreenNum == null) {
        break missingId;
      }

      id = R.id.end_greening_statistics;
      TextView endGreeningStatistics = ViewBindings.findChildViewById(rootView, id);
      if (endGreeningStatistics == null) {
        break missingId;
      }

      id = R.id.exist_end;
      LinearLayout existEnd = ViewBindings.findChildViewById(rootView, id);
      if (existEnd == null) {
        break missingId;
      }

      id = R.id.logo;
      ImageView logo = ViewBindings.findChildViewById(rootView, id);
      if (logo == null) {
        break missingId;
      }

      id = R.id.more_btn;
      ConstraintLayout moreBtn = ViewBindings.findChildViewById(rootView, id);
      if (moreBtn == null) {
        break missingId;
      }

      id = R.id.not_exist_end;
      LinearLayout notExistEnd = ViewBindings.findChildViewById(rootView, id);
      if (notExistEnd == null) {
        break missingId;
      }

      id = R.id.point_img;
      ImageView pointImg = ViewBindings.findChildViewById(rootView, id);
      if (pointImg == null) {
        break missingId;
      }

      id = R.id.recyclerview_end_greening;
      RecyclerView recyclerviewEndGreening = ViewBindings.findChildViewById(rootView, id);
      if (recyclerviewEndGreening == null) {
        break missingId;
      }

      id = R.id.tiotal_gain_point;
      TextView tiotalGainPoint = ViewBindings.findChildViewById(rootView, id);
      if (tiotalGainPoint == null) {
        break missingId;
      }

      id = R.id.total_point;
      ConstraintLayout totalPoint = ViewBindings.findChildViewById(rootView, id);
      if (totalPoint == null) {
        break missingId;
      }

      id = R.id.total_point_num;
      TextView totalPointNum = ViewBindings.findChildViewById(rootView, id);
      if (totalPointNum == null) {
        break missingId;
      }

      return new FragmentMyGreenEndBinding((NestedScrollView) rootView, btnMore, endGreen,
          endGreenCnt, endGreenNum, endGreeningStatistics, existEnd, logo, moreBtn, notExistEnd,
          pointImg, recyclerviewEndGreening, tiotalGainPoint, totalPoint, totalPointNum);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
